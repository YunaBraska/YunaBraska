name: "[WC] Repo Test Java"

on:
  workflow_dispatch:
    inputs:
      ref:
        type: string
        description: "[ref] e.g. branch, tag or commit to checkout [default: github_ref_name || github_head_ref ]"
        required: false
  workflow_call:
    inputs:
      ref:
        type: string
        description: "[ref] e.g. branch, tag or commit to checkout [default: github_ref_name || github_head_ref ]"
        required: false
    secrets:
      CC_TEST_REPORTER_ID:
        description: "Code Climate Id for test coverage and quality checks"
        required: false
    # Map the workflow outputs to job outputs
    outputs:
      has_changes:
        description: "[Boolean] if git status has changes"
        value: ${{ jobs.test.outputs.has_changes }}
      java_version:
        description: "[String] java version from pom file"
        value: ${{ jobs.test.outputs.java_version }}
      project_version:
        description: "[String] project version from pom file"
        value: ${{ jobs.test.outputs.project_version }}
      has_publish_to_code_climate:
        description: "[String] if code quality is pushed to code climate"
        value: ${{ jobs.test.outputs.has_publish_to_code_climate }}
jobs:
  test:
    runs-on: ubuntu-latest
    # Map the job outputs to step outputs
    outputs:
      has_changes: ${{ steps.git.outputs.has_changes }}
      java_version: ${{ steps.java_version_reader.outputs.java_version }}
      project_version: ${{ steps.java_version_reader.outputs.project_version }}
      has_publish_to_code_climate: ${{ steps.inputs.outputs.has_publish_to_code_climate }}
    steps:
      - name: "Validate Input"
        id: "inputs"
        run: |
          if [ "$GITHUB_ACTOR" != "YunaBraska" ]; then echo "Permission denied for user [$GITHUB_ACTOR]"; exit 1; fi
          
          ref_default=${{ github.ref_name || github.head_ref }}
          ref="${ref_A:-${ref_B:-${ref_C:-${ref_default}}}}"
          has_publish_to_code_climate=$(if [[ "${{secrets.CC_TEST_REPORTER_ID}}" == "" ]]; then echo "false"; else echo "true"; fi)
          
          echo "ref [$ref]"
          echo "has_publish_to_code_climate [$has_publish_to_code_climate]"
          
          echo "ref=$ref" >> $GITHUB_OUTPUT
          echo "has_publish_to_code_climate=$has_publish_to_code_climate" >> $GITHUB_OUTPUT
        env:
          ref_A: ${{ inputs.ref }}
          ref_B: ${{ github.event.inputs.ref }}
          ref_C: ${{ github.event.client_payload.ref }}
      - name: "Checkout"
        uses: actions/checkout@main
        with:
          ref: ${{ steps.inputs.outputs.ref }}
      - name: "Get Java Version"
        id: "java_version_reader"
        uses: YunaBraska/java-version@main
      - name: "Setup java"
        uses: actions/setup-java@main
        if: steps.git.outputs.has_changes == 'true'
        with:
          distribution: 'adopt'
          java-version: ${{ steps.java_version_reader.outputs.java_version }}
      - name: "Resolve Plugins & Dependencies"
        run: |
          sh ${{ steps.java_version_reader.outputs.cmd_resolve_deps }}
          sh ${{ steps.java_version_reader.outputs.cmd_resolve_plugs }}
      - name: "Run Tests"
        run: |
          ./mvnw -B -q clean verify
      - name: "Detect version change"
        id: "git"
        run: |
          git status;
          git checkout src/test/resources/diagram_example.svg &>/dev/null || true
          changes=$(git status --porcelain | grep version.txt | wc -l)
          has_changes=$(if [ "$changes" != "0" ]; then echo "true"; else echo "false"; fi)
          echo "changes [$changes]"
          echo "has_changes [$has_changes]"
          echo "has_changes=$has_changes" >> $GITHUB_OUTPUT
      - name: "Push changes"
        if: steps.git.outputs.has_changes == 'true'
        uses: stefanzweifel/git-auto-commit-action@master
        with:
          commit_message: "chore: ðŸ”¨ chore update version.txt"
          commit_user_name: "Kira"
          commit_user_email: "kira@yuna.berlin"
          commit_author: "Kira <kira@yuna.berlin>"
          skip_dirty_check: true
          skip_fetch: true
          skip_checkout: true
          disable_globbing: true
          create_branch: false
      - name: "Publish code quality"
        uses: paambaati/codeclimate-action@main
        if: steps.inputs.outputs.has_publish_to_code_climate == 'true'
        env:
          CC_TEST_REPORTER_ID: ${{secrets.CC_TEST_REPORTER_ID}}
          JACOCO_SOURCE_PATH: "${{github.workspace}}/src/main/java"
        with:
          coverageLocations: ${{github.workspace}}/target/site/jacoco/jacoco.xml:jacoco
  test_outputs:
    needs: "test"
    runs-on: ubuntu-latest
    steps:
      - name: "print"
        run: |
          echo "-------------------- OUTPUTS --------------------"
          echo "has_changes                 [${{needs.test.outputs.has_changes}}]"
          echo "java_version                [${{needs.test.outputs.java_version}}]"
          echo "project_version             [${{needs.test.outputs.project_version}}]"
          echo "has_publish_to_code_climate [${{needs.test.outputs.has_publish_to_code_climate}}]"
          echo "--------------------- ENVS ---------------------"
          env
