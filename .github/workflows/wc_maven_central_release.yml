name: "[WC] Central Release Maven"
#description: "Creates a new maven central release"
#designed: to be triggered after new tag creation
#Requirements:
#   secrets.GPG_PASSPHRASE
#   secrets.GPG_SIGNING_KEY
#   secrets.OSSH_USER
#   secrets.OSSH_PASS
#   RepoManagement with server-id: ossrh
#TODO: Central release without defined pom plugins
#TODO: Input: Secrets?

on:
  workflow_call:
    # Map the workflow outputs to job outputs
    outputs:
      has_pom:
        description: "[Boolean] if pom file exists"
        value: ${{ jobs.central_release.outputs.has_pom }}
      java_version:
        description: "[String] java version from pom file"
        value: ${{ jobs.central_release.outputs.java_version }}
      latest_tag:
        description: "[String] latest tag"
        value: ${{ jobs.central_release.outputs.latest_tag }}
      second_latest_tag:
        description: "[String] second latest tag"
        value: ${{ jobs.central_release.outputs.second_latest_tag }}
    secrets:
      GPG_SIGNING_KEY:
        description: "GPG key"
        required: true
      GPG_PASSPHRASE:
        description: "GPG Passphrase of the GPG Key"
        required: false
      OSSH_USER:
        description: "Maven Central user"
        required: true
      OSSH_PASS:
        description: "Maven Central password"
        required: false


jobs:
  read_version:
    runs-on: ubuntu-latest
    # Map the job outputs to step outputs
    outputs:
      latest_tag: ${{ steps.changelog.outputs.latest_tag }}
      second_latest_tag: ${{ steps.changelog.outputs.second_latest_tag }}
    steps:
      - name: "Validate Input"
        id: "inputs"
        run: |
          if [ "$GITHUB_ACTOR" != "YunaBraska" ]; then echo "Permission denied for user [$GITHUB_ACTOR]"; exit 1; fi
      - name: "Checkout"
        uses: actions/checkout@main
        with:
          fetch-depth: 500
          ref: ${{ steps.inputs.outputs.ref }}
      - name: "Read Tags"
        id: "changelog"
        run: |
          git fetch --all --tags
          latest_tag=$(git tag --sort=-creatordate | head -1)
          second_latest_tag=$(git tag --sort=-creatordate | head -2 | tail -1)
          
          echo "latest_tag [$latest_tag]"
          echo "second_latest_tag [$second_latest_tag]"
          
          echo "latest_tag=$latest_tag" >> $GITHUB_OUTPUT
          echo "second_latest_tag=$second_latest_tag" >> $GITHUB_OUTPUT
  central_release:
    needs: "read_version"
    runs-on: ubuntu-latest
    # Map the job outputs to step outputs
    outputs:
      has_pom: ${{ steps.pom.outputs.has_pom }}
      java_version: ${{ steps.java.outputs.java_version }}
      latest_tag: ${{ steps.pom.outputs.latest_tag }}
      second_latest_tag: ${{ steps.pom.outputs.second_latest_tag }}

    steps:
      - name: "Validate Input"
        id: "inputs"
        run: |
          if [ "$GITHUB_ACTOR" != "YunaBraska" ]; then echo "Permission denied for user [$GITHUB_ACTOR]"; exit 1; fi
      - name: "Checkout"
        uses: actions/checkout@main
        with:
          ref: ${{needs.read_version.outputs.latest_tag}}
      - name: "Locate POM"
        id: "pom"
        run: |
          has_pom=$([ -e "pom.xml" ] && echo "true" || echo "false") 
          latest_tag=${{needs.read_version.outputs.latest_tag}}
          second_latest_tag=${{needs.read_version.outputs.second_latest_tag}}
          
          echo "has_pom           [$has_pom]"
          echo "latest_tag        [$latest_tag]"
          echo "second_latest_tag [$second_latest_tag]"
          
          echo "has_pom=$has_pom" >> $GITHUB_OUTPUT
          echo "latest_tag=$latest_tag" >> $GITHUB_OUTPUT
          echo "second_latest_tag=$second_latest_tag" >> $GITHUB_OUTPUT
      - name: "Read java version"
        id: "java"
        if: steps.pom.outputs.has_pom == 'true'
        run: |
          java_version=$(./mvnw help:evaluate -Dexpression=java-version -q -DforceStdout)
          echo "java_version [$java_version]"
          echo "java_version=$java_version" >> $GITHUB_OUTPUT
      - name: "Setup java"
        if: steps.pom.outputs.has_pom == 'true'
        uses: actions/setup-java@main
        with:
          distribution: 'adopt'
          java-version: ${{ steps.java.outputs.java_version }}
          server-id: ossrh
          server-username: OSSRH_USERNAME
          server-password: OSSRH_TOKEN
          gpg-private-key: ${{ secrets.GPG_SIGNING_KEY }} # Value of the GPG private key to import
          gpg-passphrase: MAVEN_GPG_PASSPHRASE
      - name: "Resolve Maven Dependencies"
        id: "maven"
        if: steps.pom.outputs.has_pom == 'true'
        run: |
          ./mvnw -B -q dependency:resolve -Dmaven.test.skip=true
          ./mvnw -B -q dependency:resolve-plugins -Dmaven.test.skip=true
      - name: "Publish package"
        if: steps.pom.outputs.has_pom == 'true'
        run: |
          ./mvnw -B -q clean deploy -P release -Dmaven.test.skip=true -Dgpg.passphrase="${{ secrets.GPG_PASSPHRASE }}"
        env:
          OSSRH_USERNAME: ${{ secrets.OSSH_USER }}
          OSSRH_TOKEN: ${{ secrets.OSSH_PASS }}
          MAVEN_GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
  release_outputs:
    needs: "central_release"
    runs-on: ubuntu-latest
    steps:
      - name: "print"
        run: |
          echo "-------------------- OUTPUTS --------------------"
          echo "has_pom           [${{needs.central_release.outputs.has_pom}}]"
          echo "java_version      [${{needs.central_release.outputs.java_version}}]"
          echo "latest_tag        [${{needs.central_release.outputs.latest_tag}}]"
          echo "second_latest_tag [${{needs.central_release.outputs.second_latest_tag}}]"
          echo "--------------------- ENVS ---------------------"
          env
