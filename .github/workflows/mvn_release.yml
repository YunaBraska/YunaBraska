name: CI_MVN_RELEASE

on:
  workflow_dispatch:
    inputs:
      repository:
        type: string
        description: "[repository] [default:${GITHUB_REPOSITORY}] (e.g. my-org/my-repo)"
        required: false
      branch:
        type: string
        description: "[branch] [default:${GITHUB_REF}] (e.g. my-branch)"
        required: false
      tag_new:
        type: string
        description: "[tag_new] [default:''] (e.g. 1.2.3-RC4+Meta5)"
        required: false
  workflow_call:
    inputs:
      repository:
        type: string
        description: "[repository] [default:${GITHUB_REPOSITORY}] (e.g. my-org/my-repo)"
        required: false
      branch:
        type: string
        description: "[branch] [default:${GITHUB_REF}] (e.g. my-branch)"
        required: false
      tag_new:
        type: string
        description: "[tag_new] [default:''] (e.g. 1.2.3-RC4+Meta5)"
        required: false
  repository_dispatch:
    types: [ EVENT_CI_MVN_RELEASE ]

jobs:
  prep:
    name: "Preparation"
    runs-on: ubuntu-latest

    outputs:
      #INFO INPUTS
      branch: ${{ steps.info_input.outputs.branch }}
      repository: ${{ steps.info_input.outputs.repository }}
      tag_new: ${{ steps.info_input.outputs.tag_new }}
      java_version: ${{ steps.info_input.outputs.java_version }}

    steps:
      - name: "Read Inputs"
        id: "info_input"
        run: |
          branch="${branch_A:-${branch_B:-${branch_C:-${GITHUB_REF}}}}"
          repository="${repository_A:-${repository_B:-${repository_C:-${GITHUB_REPOSITORY}}}}"
          tag_new="${tag_new_A:-${tag_new_B:-${tag_new_C}}}"
          
          echo "branch [$branch]"
          echo "repository [$repository]"
          echo "tag_new [$tag_new]"
          
          echo "::set-output name=branch::$branch"
          echo "::set-output name=repository::$repository"
          echo "::set-output name=tag_new::$tag_new"
        env:
          branch_A: ${{ inputs.branch }}
          branch_B: ${{ github.event.inputs.branch }}
          branch_C: ${{ github.event.client_payload.branch }}

          repository_A: ${{ inputs.repository }}
          repository_B: ${{ github.event.inputs.repository }}
          repository_C: ${{ github.event.client_payload.repository }}

          tag_new_A: ${{ inputs.tag_new }}
          tag_new_B: ${{ github.event.inputs.tag_new }}
          tag_new_C: ${{ github.event.client_payload.tag_new }}
      - name: "Checkout Repository"
        uses: actions/checkout@v3
        with:
          ref: ${{ steps.info_input.outputs.branch }}
          repository: ${{ steps.info_input.outputs.repository }}
          token: ${{ secrets.CI_TOKEN }}
      - name: "Detect Java Version"
        run: |
          wget -nc -nv https://raw.githubusercontent.com/YunaBraska/YunaBraska/main/.github/scripts/python/functions/xml_reader.py -P target
          chmod +x target/xml_reader.py
          java_version = target/xml_reader.py --pjv
          echo "java_version [$java_version]"
          echo "::set-output name=java_version::$java_version"
          rm -rf target/git_analyze.py target/semver.py target/xml_reader.py
  maven_release:
    needs: prep
    name: "Maven Build & Test"
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout Repository"
        uses: actions/checkout@v3
        with:
          ref: ${{ needs.prep.outputs.branch }}
          repository: ${{ needs.prep.outputs.repository }}
          token: ${{ secrets.CI_TOKEN }}
      - name: "Setup Java"
        uses: actions/setup-java@v3
        with:
          java-version: ${{ needs.prep.outputs.java_version }}
          distribution: 'adopt'
          server-id: ossrh
          server-username: OSSRH_USERNAME
          server-password: OSSRH_TOKEN
          gpg-private-key: ${{ secrets.GPG_SIGNING_KEY }} # Value of the GPG private key to import
          gpg-passphrase: MAVEN_GPG_PASSPHRASE
      - name: "Preparation"
        run: |
          ./mvnw -B -q -N io.takari:maven:wrapper
          ./mvnw -B -q versions:update-parent -DgenerateBackupPoms=false
          ./mvnw -B -q versions:update-properties -DgenerateBackupPoms=false
          ./mvnw -B -q clean verify -Dmaven.test.skip=true
          ./mvnw -B -q dependency:resolve -Dmaven.test.skip=true
          ./mvnw -B -q dependency:resolve-plugins -Dmaven.test.skip=true
      - name: "Publish package"
        run: mvn -B clean deploy -P release -Dmaven.test.skip=true -Dgpg.passphrase="${{ secrets.GPG_PASSPHRASE }}"
        env:
          OSSRH_USERNAME: ${{ secrets.OSSH_USER }}
          OSSRH_TOKEN: ${{ secrets.OSSH_PASS }}
          MAVEN_GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}




