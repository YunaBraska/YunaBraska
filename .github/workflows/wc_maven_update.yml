name: "[WC] Update Maven"
#description: "Updates maven wrapper and maven dependencies of pom file"
#TODO: Input: Branch/Tag/Commit

on:
  workflow_call:
    inputs:
      ref:
        type: string
        description: "[ref] e.g. branch, tag or commit to checkout [default: github_ref_name || github_head_ref ]"
        required: false
    secrets:
      CI_TOKEN:
        required: false
        description: "for uploading changes"
    # Map the workflow outputs to job outputs
    outputs:
      has_pom:
        description: "[Boolean] if pom file exists"
        value: ${{ jobs.update.outputs.has_pom }}
      has_changes:
        description: "[Boolean] if git status has changes"
        value: ${{ jobs.update.outputs.has_changes }}
      java_version:
        description: "[String] java version from pom file"
        value: ${{ jobs.update.outputs.java_version }}
      project_version:
        description: "[String] project version from pom file"
        value: ${{ jobs.update.outputs.project_version }}
jobs:
  update:
    runs-on: ubuntu-latest
    # Map the job outputs to step outputs
    outputs:
      has_pom: ${{ steps.pom.outputs.has_pom }}
      has_changes: ${{ steps.git.outputs.has_changes }}
      java_version: ${{ steps.java.outputs.java_version }}
      project_version: ${{ steps.java.outputs.project_version }}
    steps:
      - name: "Validate Input"
        id: "inputs"
        run: |
          ref_default=${{ github.ref_name || github.head_ref }}
          ref="${ref_A:-${ref_B:-${ref_C:-${ref_default}}}}"

          echo "ref [$ref]"

          echo "ref=$ref" >> $GITHUB_OUTPUT
        env:
          ref_A: ${{ inputs.ref }}
          ref_B: ${{ github.event.inputs.ref }}
          ref_C: ${{ github.event.client_payload.ref }}
      - name: "Checkout"
        uses: actions/checkout@main
        with:
          ref: ${{ steps.inputs.outputs.ref }}
          token: ${{ secrets.CI_TOKEN || github.token }}
      - name: "Locate POM"
        id: "pom"
        run: |
          has_pom=$([ -e "pom.xml" ] && echo "true" || echo "false") 
          echo "has_pom [$has_pom]"
          echo "has_pom=$has_pom" >> $GITHUB_OUTPUT
      - name: "Read java version"
        id: "java"
        if: steps.pom.outputs.has_pom == 'true'
        run: |
          java_version=$(./mvnw help:evaluate -Dexpression=java-version -q -DforceStdout)
          project_version=$(./mvnw help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "java_version [$java_version]"
          echo "project_version [$project_version]"
          echo "java_version=$java_version" >> $GITHUB_OUTPUT
          echo "project_version=$project_version" >> $GITHUB_OUTPUT
      - name: "Setup java"
        uses: actions/setup-java@main
        with:
          distribution: 'adopt'
          java-version: ${{ steps.java.outputs.java_version }}
      - name: "Update Maven & Dependencies"
        id: "maven"
        if: steps.pom.outputs.has_pom == 'true'
        run: |
          ./mvnw -B -q -N wrapper:wrapper
          ./mvnw -B -q versions:update-parent -DgenerateBackupPoms=false
          ./mvnw -B -q versions:update-properties -DgenerateBackupPoms=false
      - name: "Detect changes"
        id: "git"
        run: |
          git add .;
          git status;
          has_changes=$(if [[ $(git status --porcelain) ]]; then echo "true"; else echo "false";fi)
          echo "changes [$(git status --porcelain | wc -l)]"
          echo "has_changes [$has_changes]"
          echo "has_changes=$has_changes" >> $GITHUB_OUTPUT
      - name: "Push changes"
        if: steps.git.outputs.has_changes == 'true'
        uses: stefanzweifel/git-auto-commit-action@master
        with:
          commit_message: "chore: ðŸ”¨ updated dependencies"
          commit_user_name: "Kira"
          commit_user_email: "kira@yuna.berlin"
          commit_author: "Kira <kira@yuna.berlin>"
          skip_dirty_check: true
          skip_fetch: true
          skip_checkout: true
          disable_globbing: true
          create_branch: false
  update_outputs:
    needs: "update"
    runs-on: ubuntu-latest
    steps:
      - name: "print"
        run: |
          echo "-------------------- OUTPUTS --------------------"
          echo "has_pom         [${{needs.update.outputs.has_pom}}]"
          echo "has_changes     [${{needs.update.outputs.has_changes}}]"
          echo "java_version    [${{needs.update.outputs.java_version}}]"
          echo "project_version [${{needs.update.outputs.project_version}}]"
          echo "--------------------- ENVS ---------------------"
          env
