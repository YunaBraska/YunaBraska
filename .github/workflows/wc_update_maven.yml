name: "[WC] Update Maven"

on:
  workflow_call:
    # Map the workflow outputs to job outputs
    outputs:
      has_pom:
        description: "[Boolean] java version from pom file"
        value: ${{ jobs.update.outputs.has_pom }}
      has_changes:
        description: "[Boolean] java version from pom file"
        value: ${{ jobs.update.outputs.has_changes }}
      java_version:
        description: "[String] java version from pom file"
        value: ${{ jobs.update.outputs.java_version }}
      project_version:
        description: "[String] project version from pom file"
        value: ${{ jobs.update.outputs.project_version }}
jobs:
  update:
    runs-on: ubuntu-latest
    # Map the job outputs to step outputs
    outputs:
      has_pom: ${{ steps.pom.outputs.has_pom }}
      has_changes: ${{ steps.git.outputs.has_changes }}
      java_version: ${{ steps.java.outputs.java_version }}
      project_version: ${{ steps.java.outputs.project_version }}
    steps:
      - name: "Check Permission"
        run: |
          if [ "$GITHUB_ACTOR" != "YunaBraska" ]; then echo "Permission denied for user [$GITHUB_ACTOR]"; exit 1; fi
      - name: "Checkout"
        uses: actions/checkout@v3
      - name: "Locate POM"
        id: "pom"
        run: |
          has_pom=$([ -e "pom.xml" ] && echo "true" || echo "false") 
          echo "has_pom [$has_pom]"
          echo ::set-output name=has_pom::"$has_pom"
      - name: "Read java version"
        id: "java"
        if: steps.pom.outputs.has_pom == 'true'
        run: |
          java_version=$(./mvnw help:evaluate -Dexpression=java-version -q -DforceStdout)
          project_version=$(./mvnw help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "java_version [$java_version]"
          echo "project_version [$project_version]"
          echo ::set-output name=java_version::"$java_version"
          echo ::set-output name=project_version::"$project_version"
      - name: "Update Maven & Dependencies"
        id: "maven"
        if: steps.pom.outputs.has_pom == 'true'
        run: |
          ./mvnw -B -q -N io.takari:maven:wrapper
          ./mvnw -B -q versions:update-parent -DgenerateBackupPoms=false
          ./mvnw -B -q versions:update-properties -DgenerateBackupPoms=false
      - name: "Detect changes"
        id: "git"
        run: |
          has_changes=$(if [[ $(git status --porcelain) ]]; then echo "true"; else echo "false";fi)
          echo "number of changes [$(git status --porcelain | wc -l)]"
          echo "has_changes [$has_changes]"
          echo ::set-output name=has_changes::"$has_changes"
      - name: "Setup java"
        uses: actions/setup-java@v3
        if: steps.git.outputs.has_changes == 'true'
        with:
          distribution: 'adopt'
          java-version: ${{ steps.java.outputs.java_version }}
      - name: "Test changes"
        if: steps.git.outputs.has_changes == 'true'
        run: |
          ./mvnw -B -q clean verify
      - name: "Push changes"
        if: steps.git.outputs.has_changes == 'true'
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: "chore: ðŸ”¨ updated dependencies"
          commit_user_name: "Kira"
          commit_user_email: "kira@yuna.berlin"
          commit_author: "Kira <kira@yuna.berlin>"
          skip_dirty_check: true
          skip_fetch: true
          skip_checkout: true
          disable_globbing: true
          create_branch: false
  update_outputs:
    needs: "update"
    runs-on: ubuntu-latest
    steps:
      - name: "print"
        run: |
          echo "---------- OUTPUTS ----------"
          echo "has_pom [${{needs.update.outputs.has_pom}}]"
          echo "has_changes [${{needs.update.outputs.has_changes}}]"
          echo "java_version [${{needs.update.outputs.java_version}}]"
          echo "project_version [${{needs.update.outputs.project_version}}]"
          echo "----------- ENVS -----------"
          env
